import Head from 'next/head';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';
import Header from '@/components/Header';
import Products from '@/components/Products';
import Search from '@/components/Search';
import { Deal, LocationResponse } from '@/types';
import Footer from '@/components/Footer';
import config from '@/config';

export default function Home({
  deals,
  locations,
}: {
  deals: Deal[];
  locations: LocationResponse;
}) {
  const [allDeals, setAllDeals] = useState(deals);
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const [search, setSearch] = useState({
    deal: '',
    location: '',
  });

  useEffect(() => {
    if (router.query.deal || router.query.location) {
      handleSearchSubmit();
      setSearch({
        deal: router.query.deal as string,
        location: router.query.location as string,
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [router.query.deal, router.query.location]);

  const handleSearchSubmit = async () => {
    const { deal, location } = router.query;
    const query = new URLSearchParams({
      search: deal as string,
      location: location as string,
    });
    const res = await fetch(`${config.url()}/api/deals?${query}`, {
      method: 'GET',
    });
    const deals = await res.json();
    setAllDeals(deals);
    setLoading(false);
  };

  const handleResetForm = async () => {
    setLoading(true); // set loading to true
    const res = await fetch(`${config.url()}/api/deals`, {
      method: 'GET',
    });
    const deals = await res.json();
    setAllDeals(deals);
    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>Deals Finder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Search
        locations={locations.locations}
        searchProductAction={handleSearchSubmit}
        resetFormAction={handleResetForm}
        searchedDeal={search.deal}
        searchedLocation={search.location}
      />
      <Products deals={allDeals} />
      <Footer />
    </>
  );
}

// Use SSR because e-commerce home page will need strong SEO
export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
}) => {
  const url = config.url(req);
  const locationsRes = await fetch(`${url}/api/locations`);
  const locations = (await locationsRes.json()) as LocationResponse;

  const { deal, location } = query;
  // if param is present then fetch SSR of only searched parameter deals
  if (deal || location) {
    const query = new URLSearchParams({
      search: deal as string,
      location: location as string,
    });
    const dealsRes = await fetch(`${url}/api/deals?${query}`);
    const deals = (await dealsRes.json()) as Deal[];

    return {
      props: {
        deals,
        locations,
      },
    };
  }

  const dealsRes = await fetch(`${url}/api/deals`);
  const deals = (await dealsRes.json()) as Deal[];

  return {
    props: {
      deals,
      locations,
    },
  };
};
